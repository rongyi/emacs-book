#+TITLE: 简介
#+DATE: <2016-11-24 四>
#+AUTHOR: 荣怡
#+EMAIL: sqrongyi@163.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:{} arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:t p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 25.1.1 (Org mode 8.2.10)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export


* 简介
#+BEGIN_QUOTE
Nothing's quite so demoralizing as a tool hang-up. Buy good tools as you can afford them ans you'll never regret it.
--  Zen and the art of motorcycle maintenance
#+END_QUOTE
Emacs是Edit Macros的简写。前身是TECO(Text Editor and Corrector)。 诞生于1976年的MIT AIlab， 除了RMS之外， 看《Coders at Works》的介绍， Guy Steele， JWZ等当时都贡献了不少代码，也就是说这个软件已经四十年了。来看看经常使用Emacs的人对这个软件的评价：
#+BEGIN_QUOTE
Emacs outshines all other editing software in approximately the same way that the noonday sun does the stars. It is not just bigger and brighter; it simply makes everything else vanish
-- In the Beginning was the Command Line [fn:1]
#+END_QUOTE

#+BEGIN_QUOTE
I don't care about the OS I use, It is just a boot loader for Emacs anayway.[fn:2]
#+END_QUOTE

Why Emacs？跟个人的工作经验有关系，在上海的第一家公司周围的同事都是Emacs玩家，但当时自己Vim已经很熟练了，并且觉得Vim没有什么让我觉得不爽的地方，所以没那么急着要切换过去，但是他们那么聪明选择用Emacs肯定是有原因的。于是这之间有很多次的尝试，这一尝试发现了Org mode，官方页面[fn:3]的Title是： Org mode for Emacs - Your Life in Plain Text。后面的介绍简直太Unix哲学了，看过《The Art of Unix Programming》[fn:4]都会知道Plain Text在命令行输出和管道之间有多重要。而我[fn:5]之前恰好玩过Latex知道这种玩法和Word的区别以及高效。通过这些工具可以完全抛弃鼠标来实现排版操作，而在了解了Org mode之后发现这个就是简化版的Latex，所以之后虽然开发还在Vim下但是文档之类的都已经全部改到Emacs下编辑了,并且Vim这种带模式的用来编辑中文时中英文切换真是蛋疼的要死，而Emacs通过修饰键可以稍微舒服一点。

后面发现了一个Vim吊炸天的插件YouCompleteMe[fn:6]对比Emacs下的Company或者AutoComplete，简直可以完爆他们。后来YCM逐渐改变架构，变成了C/S模式可以将后端独立出来支持其他编辑器，再后来支持Emacs的前端[fn:7]也出现了，这个时候恰好有一些自己的时间所以就又开始了自己的倒腾之路。而这一次的折腾便渐渐的让自己待在Emacs下的时间越来越长，引用别人的一句话便是： =I don't use Emacs, I live in Emacs= 。

Emacs VS Vim(带有个人偏见的看法，拒绝跟任何人撕逼)
+ Emacs的buffer是非常有效的IPC(InterProcessCommunication)桥梁，所以可以无缝结合一些REPL(Read Evaluate Print Loop)或者gdb等相比之下Vim略逊
+ Vim的model编辑是在有上下文编辑环境中个人感觉最快的，而Emacs的修饰键按多了小拇指疼的要死
+ 不要说启动速度，Vim是打开关闭打开关闭..., 而Emacs一般是开机打开Emacs.............关闭Emacs关机，所以用法不一样，那些说Vim在这方面占优势的只是不了解Emacs的使用模式而已。
+ Emacs采用的是Lisp语言作为配置语言，其实就是一个大的Lisp REPL，Vim的脚本就不提了。
+ 由于更有效的IPC，Emacs在TDD方面比Vim更胜一筹。可以是一个函数一个变量这样小的单位去测试，这样带来的是整个开发过程中morale的提升[fn:8]
+ 两个开源软件的维护者， RMS在2008年就step down[fn:9]了，去年又换帅[fn:10]，而Vim的维护者是这样回答这个问题：How can the community ensure that the Vim project succeeds for the foreseeable future? ==> Keep me alive。

其他人的一些Why Emacs：
+ http://elephly.net/posts/2016-02-14-ilovefs-emacs.html
+ http://www.howardism.org/Technical/Emacs/why-emacs.html
+ http://blog.aaronbieber.com/2015/01/17/learning-to-love-emacs.html
+ http://batsov.com/articles/2011/11/19/why-emacs/ 作者有个有名的Emacs Starter kit: prelude[fn:11]。
以上的每一篇文章都推荐阅读

* 键盘描述约定：

| Key  | Description                                    |
|------+------------------------------------------------|
|      |                                                |
| C-   | (press and hold) the Control key               |
| M-   | the Meta key (the Alt key, on most keyboards)  |
| S-   | the Shift key (e.g. ‘S-TAB’ means Shift Tab) |
| DEL  | the Backspace key (not the Delete key)         |
| RET  | the Return or Enter key                        |
| SPC  | the Space bar                                  |
| ESC  | the Escape key                                 |
| TAB  | the Tab key                                    |
| <F1> | F1 key                                         |

当文中出现 =<C-c>= 意思就是同时按下Ctrl键和c键， =<C-C>= 意思是同时按下Ctrl Shift c。其他以此类推。

* 初接触
  #+BEGIN_SRC bash
  emacs #启动并加载~/.emacs.d/init.el配置
  emacs -Q #启动不加载任何配置
  # 如果配置文件太多，造成启动速度慢，可以用daemon/client方式启动
  emacs --daemon # 以daemon方式启动Emacs
  emacsclient -c # 之后以client方式连接Emacs daemon
  #+END_SRC

  #+CAPTION: Ubuntu下Emacs不带任何参数的启动界面
  [[file:img/emacs-start.png]]

  退出Emacs
#+BEGIN_SRC bash
C-x C-c
或者 M-x save-buffers-kill-emacs
#+END_SRC
  UI方面的说明这篇文章[fn:15]已经写的非常好，这里不再赘述。

* 帮助系统
Emacs自带强大的帮助系统，个人比较常用的有以下一些
| Key     | 说明                                      |
|---------+-------------------------------------------|
| C-h v   | 查询一些Variable的的含义                  |
| C-h f   | 查询一些函数的                            |
| C-h k   | 查询Emacs按键绑定的函数并列出此函数的意思 |
| C-h C-h | 列出帮助系统的一些帮助类别，相当于帮助系统的帮助系统，有点递归的意思在里面 |
其中对函数和key的查询应该是最长应用的场景，所以而其他的你可以通过记住 =C-h C-h= 来查询即可。

* 警告
请一定警惕Emacs Trap[fn:12]， Emacs的本质在与其工具性， 而工具只有使用才有价值，所谓磨刀不误砍柴工，对Emacs的学习和配置就相当于在磨刀，而如果不“砍柴”只是磨刀的话显然就掉进Emacs的坑里，所以配置好的一个功能只有反复使用(coding)才会发挥其价值，也就是前期投入配置的时间在后面反复使用中“收回投资”

* Not UNIX?
  #+BEGIN_QUOTE
Many Emacs advocates fall for the trap of apologizing for why Emacs is not Unixy, as though it were some sort of defect. They should celebrate the fact that Emacs doesn't come from the Unix tradition of small, composable tools and "doing only one thing and doing it well". It is rooted in the ambitious work of the MIT Artificial Intelligence lab, the LISP programming language, and the single user MIT Lisp Machine that essentially booted up to a LISP REPL. [fn:13]
  #+END_QUOTE

* OS版本
  对于开发而言还是GNU/Linux或者macos平台，Emacs支持主流平台，甚至在Android上也可以[fn:14]。本介绍在Linux下完成。macos平台应该也适用。

* Footnotes

[fn:1] http://cristal.inria.fr/~weis/info/commandline.html

[fn:2] https://www.youtube.com/watch?v=VADudzQGvU8 推荐观看，主题叫做Emacs: The editor of a life time

[fn:3] http://orgmode.org/

[fn:4] https://book.douban.com/subject/1229959/

[fn:5] 我比较土，不会用笔者来代表自己。

[fn:6] https://github.com/Valloric/YouCompleteMe

[fn:7] https://github.com/abingham/emacs-ycmd

[fn:8] 这点PG在《黑客与画家》这本书有详细讲解。而我准备把全文摘抄在这里： Building something by gradually refining a prototype is good for morale because it keeps you engaged. In software, my rule is: always have working code. If you're writing something you'll be able to test in an hour, you have the prospect of an immediate reward to motivate you. The save is true in the arts, an particularly in oil painting. Most painters start with a blurry sketch and gradually refine it.

[fn:9] http://lists.gnu.org/archive/html/emacs-devel/2008-02/msg02140.html

[fn:10] https://lists.gnu.org/archive/html/emacs-devel/2015-09/msg00849.html

[fn:11] https://github.com/bbatsov/prelude

[fn:12] 这个是在Let Over Lambda那本书里提及的，个人对此深表认同。因为也掉过坑里。

[fn:13] https://news.ycombinator.com/item?id=11099972

[fn:14] http://endlessparentheses.com/running-emacs-on-android.html

[fn:15] http://www.braveclojure.com/basic-emacs/
