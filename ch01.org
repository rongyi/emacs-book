#+TITLE: 简介
#+DATE: <2016-11-24 四>
#+AUTHOR: 荣怡
#+EMAIL: sqrongyi@163.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:{} arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:t p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 25.1.1 (Org mode 8.2.10)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export


* 简介
Emacs是Edit Macros的简写。前身是TECO(Text Editor and Corrector)。 诞生于1976年的MIT AIlab， 除了RMS之外， 看《Coders at Works》的介绍， Guy Steele， JWZ等当时都贡献了不少代码，也就是说这个软件已经四十年了。来看看经常使用Emacs的人对这个软件的评价：
#+BEGIN_QUOTE
Emacs outshines all other editing software in approximately the same way that the noonday sun does the stars. It is not just bigger and brighter; it simply makes everything else vanish
-- In the Beginning was the Command Line [fn:1]
#+END_QUOTE

#+BEGIN_QUOTE
I don't care about the OS I use, It is just a boot loader for Emacs anayway.[fn:2]
#+END_QUOTE

Why Emacs？跟个人的工作经验有关系，在上海的第一家公司周围的同事都是Emacs玩家，但当时自己Vim已经很熟练了，并且觉得Vim没有什么让我觉得不爽的地方，所以没那么急着要切换过去，但是他们那么聪明选择用Emacs肯定是有原因的。于是这之间有很多次的尝试，这一尝试发现了Org mode，官方页面[fn:3]的Title是： Org mode for Emacs - Your Life in Plain Text。后面的介绍简直太Unix哲学了，看过《The Art of Unix Programming》[fn:4]都会知道Plain Text在命令行输出和管道之间有多重要。而我[fn:5]之前恰好玩过Latex知道这种玩法和Word的区别以及高效。通过这些工具可以完全抛弃鼠标来实现排版操作，而在了解了Org mode之后发现这个就是简化版的Latex，所以之后虽然开发还在Vim下但是文档之类的都已经全部改到Emacs下编辑了,并且Vim这种带模式的用来编辑中文时中英文切换真是蛋疼的要死，而Emacs通过修饰键可以稍微舒服一点。

后面发现了一个Vim吊炸天的插件YouCompleteMe[fn:6]对比Emacs下的Company或者AutoComplete，简直可以完爆他们。后来YCM逐渐改变架构，变成了C/S模式可以将后端独立出来支持其他编辑器，再后来支持Emacs的前端[fn:7]也出现了，这个时候恰好有一些自己的时间所以就又开始了自己的倒腾之路。而这一次的折腾便渐渐的让自己待在Emacs下的时间越来越长，引用别人的一句话便是： =I don't use Emacs, I live in Emacs= 。

Emacs VS Vim(带有个人偏见的看法，拒绝跟任何人撕逼)
+ Emacs的buffer是非常有效的IPC(InterProcessCommunication)桥梁，所以可以无缝结合一些REPL(Read Evaluate Print Loop)或者gdb等相比之下Vim略逊
+ Vim的model编辑是在有上下文编辑环境中个人感觉最快的，而Emacs的修饰键按多了小拇指疼的要死
+ 不要说启动速度，Vim是打开关闭打开关闭..., 而Emacs一般是开机打开Emacs.............关闭Emacs关机，所以用法不一样，那些说Vim在这方面占优势的只是不了解Emacs的使用模式而已。
+ Emacs采用的是Lisp语言作为配置语言，说白了就是一个大的Lisp REPL，Vim的脚本就不提了
+ 由于更有效的IPC，Emacs在TDD方面比Vim更胜一筹。可以是一个函数一个变量这样小的单位去测试，这样带来的是整个开发过程中morale的提升[fn:8]

* Footnotes

[fn:1] http://cristal.inria.fr/~weis/info/commandline.html

[fn:2] https://www.youtube.com/watch?v=VADudzQGvU8 推荐观看，主题叫做Emacs: The editor of a life time

[fn:3] http://orgmode.org/

[fn:4] https://book.douban.com/subject/1229959/

[fn:5] 比较土，不会用笔者来代表自己。

[fn:6] https://github.com/Valloric/YouCompleteMe

[fn:7] https://github.com/abingham/emacs-ycmd

[fn:8] 这点PG在《黑客与画家》这本书有详细讲解。而我准备把全文摘抄在这里： Building somthing by gradually refining a prototype is good for morale because it keeps you engaged. In software, my rule is: always have working code. If you're writing something you'll be able to test in an hour, you have the prospect of an immediate reward to motivate you. The save is true in the arts, an particularly in oil painting. Most painters start with a blurry sketch and gradually refine it.
